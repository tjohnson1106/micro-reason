// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReasonApollo from "reason-apollo/src/ReasonApollo.bs.js";

var ppx_printed_query = "query getPosts  {\nposts  {\ntitle  \ncover_img  \ncontent  \ncreated_at  \nuser  {\nname  \navatar_url  \n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "posts");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeArray(value$1);
      tmp = match$2 !== undefined ? match$2.map((function (value) {
                var match = Js_json.decodeObject(value);
                if (match !== undefined) {
                  var value$1 = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(value$1, "title");
                  var tmp;
                  if (match$1 !== undefined) {
                    var value$2 = Caml_option.valFromOption(match$1);
                    var match$2 = Js_json.decodeString(value$2);
                    tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                  } else {
                    tmp = Js_exn.raiseError("graphql_ppx: Field title on type posts is missing");
                  }
                  var match$3 = Js_dict.get(value$1, "cover_img");
                  var tmp$1;
                  if (match$3 !== undefined) {
                    var value$3 = Caml_option.valFromOption(match$3);
                    var match$4 = Js_json.decodeNull(value$3);
                    if (match$4 !== undefined) {
                      tmp$1 = undefined;
                    } else {
                      var match$5 = Js_json.decodeString(value$3);
                      tmp$1 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                    }
                  } else {
                    tmp$1 = undefined;
                  }
                  var match$6 = Js_dict.get(value$1, "content");
                  var tmp$2;
                  if (match$6 !== undefined) {
                    var value$4 = Caml_option.valFromOption(match$6);
                    var match$7 = Js_json.decodeString(value$4);
                    tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
                  } else {
                    tmp$2 = Js_exn.raiseError("graphql_ppx: Field content on type posts is missing");
                  }
                  var match$8 = Js_dict.get(value$1, "created_at");
                  var match$9 = Js_dict.get(value$1, "user");
                  var tmp$3;
                  if (match$9 !== undefined) {
                    var match$10 = Js_json.decodeObject(Caml_option.valFromOption(match$9));
                    if (match$10 !== undefined) {
                      var value$5 = Caml_option.valFromOption(match$10);
                      var match$11 = Js_dict.get(value$5, "name");
                      var tmp$4;
                      if (match$11 !== undefined) {
                        var value$6 = Caml_option.valFromOption(match$11);
                        var match$12 = Js_json.decodeString(value$6);
                        tmp$4 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                      } else {
                        tmp$4 = Js_exn.raiseError("graphql_ppx: Field name on type users is missing");
                      }
                      var match$13 = Js_dict.get(value$5, "avatar_url");
                      var tmp$5;
                      if (match$13 !== undefined) {
                        var value$7 = Caml_option.valFromOption(match$13);
                        var match$14 = Js_json.decodeString(value$7);
                        tmp$5 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                      } else {
                        tmp$5 = Js_exn.raiseError("graphql_ppx: Field avatar_url on type users is missing");
                      }
                      tmp$3 = {
                        name: tmp$4,
                        avatar_url: tmp$5
                      };
                    } else {
                      tmp$3 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                  } else {
                    tmp$3 = Js_exn.raiseError("graphql_ppx: Field user on type posts is missing");
                  }
                  return {
                          title: tmp,
                          cover_img: tmp$1,
                          content: tmp$2,
                          created_at: match$8 !== undefined ? Caml_option.valFromOption(match$8) : Js_exn.raiseError("graphql_ppx: Field created_at on type posts is missing"),
                          user: tmp$3
                        };
                } else {
                  return Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
              })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field posts on type query_root is missing");
    }
    return {
            posts: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var PostsQuery = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetPostsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

export {
  PostsQuery ,
  GetPostsQuery ,
  
}
/* GetPostsQuery Not a pure module */
